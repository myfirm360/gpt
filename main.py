from flask import Flask, request, jsonify
import openai
import os
import threading
import requests
import time
import re

app = Flask(__name__)
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
ASSISTANT_ID = "asst_BKqfAhqCEgH5H1MG2kP5hfEP"


# ── Clean + prepare Slack-friendly markdown ───────────────────────────────────
def clean_for_slack(text: str) -> str:
    text = re.sub(r"【[^】]+】", "", text)          # Remove citation markers
    text = re.sub(r"\*\*(.*?)\*\*", r"*\1*", text)  # Convert **bold** to *bold*
    return text.strip()


# ── Build Slack block layout from a text string ───────────────────────────────
def build_slack_blocks(text: str):
    # Split into "title", "body", and "footer" if needed
    lines = text.strip().split("\n")
    if not lines:
        return []

    title_line = lines[0]
    body_text = "\n".join(lines[1:]).strip()

    return [
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*{title_line}*"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": body_text
            }
        },
        { "type": "divider" },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": "_Generated by your Firm360 Assistant_"
                }
            ]
        }
    ]


# ── GPT thread processor ──────────────────────────────────────────────────────
def handle_assistant_interaction(user_input: str, response_url: str):
    try:
        # 1. Create thread
        thread = client.beta.threads.create()

        # 2. Add message
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_input
        )

        # 3. Run the assistant
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )

        # 4. Poll until completion
        while True:
            status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if status.status == "completed":
                break
            elif status.status in {"failed", "cancelled"}:
                raise Exception(f"Assistant run {status.status}")
            time.sleep(1.3)

        # 5. Fetch reply
        msgs = client.beta.threads.messages.list(thread_id=thread.id)
        raw_reply = next(
            (m.content[0].text.value for m in msgs.data if m.role == "assistant"),
            "⚠️ No reply from Assistant."
        )

        cleaned = clean_for_slack(raw_reply)
        blocks = build_slack_blocks(cleaned)

    except Exception as e:
        print("Error:", e, flush=True)
        blocks = [
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"⚠️ Something went wrong: {e}"
                }
            }
        ]

    # 6. Post to Slack
    try:
        requests.post(
            response_url,
            json={
                "response_type": "in_channel",
                "blocks": blocks
            },
            timeout=5
        )
    except Exception as post_err:
        print("Slack post error:", post_err, flush=True)


# ── Slack slash command endpoint ──────────────────────────────────────────────
@app.route("/slack/events", methods=["POST"])
def slack_events():
    user_input = request.form.get("text", "").strip()
    response_url = request.form.get("response_url", "")

    if not user_input:
        return jsonify({
            "response_type": "ephemeral",
            "text": "⚠️ Try `/customgpt your question…`"
        }), 200

    threading.Thread(
        target=handle_assistant_interaction,
        args=(user_input, response_url)
    ).start()

    return jsonify({
        "response_type": "ephemeral",
        "text": "⏳ Got it! I’ll post your answer here shortly."
    }), 200


# ── Health check ──────────────────────────────────────────────────────────────
@app.route("/", methods=["GET"])
def index():
    return "Firm360 Slack Assistant with Block Kit is live ✅", 200
